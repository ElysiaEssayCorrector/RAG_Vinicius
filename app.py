import streamlit as st
import pandas as pd
import os
import sys
import re
import time

# Adiciona o diret√≥rio atual ao caminho de busca do Python
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# Agora importe dos m√≥dulos src
from src.evaluation import RedacaoEvaluator
from src.rag import RAGSystem

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Corretor de Reda√ß√µes ENEM",
    page_icon="üìù",
    layout="wide",
    initial_sidebar_state="expanded",
)

# Inicializa√ß√£o de sess√£o
if 'avaliacao' not in st.session_state:
    st.session_state.avaliacao = None
if 'redacao_submetida' not in st.session_state:
    st.session_state.redacao_submetida = False
if 'redacao_text' not in st.session_state:
    st.session_state.redacao_text = ""
if 'tema' not in st.session_state:
    st.session_state.tema = ""
if 'verificacao_tema' not in st.session_state:
    st.session_state.verificacao_tema = None

# Fun√ß√£o para carregar os avaliadores (executada apenas uma vez)
@st.cache_resource
def carregar_avaliadores():
    # Paths para o banco de dados vetorial
    vector_db_path = "models/vectordb"
    
    # Verifica se o banco de dados existe
    if not os.path.exists(vector_db_path):
        st.error("Banco de dados vetorial n√£o encontrado. Execute o script de pr√©-processamento primeiro.")
        return None, None
    
    # Carrega os avaliadores
    try:
        evaluator = RedacaoEvaluator(vector_db_path, use_anthropic=True)
        rag_system = RAGSystem(vector_db_path, use_anthropic=True)
        return evaluator, rag_system
    except Exception as e:
        st.error(f"Erro ao carregar avaliadores: {str(e)}")
        return None, None

# Fun√ß√£o para processar a submiss√£o
def processar_submissao():
    st.session_state.redacao_submetida = True
    st.session_state.redacao_text = redacao_text
    st.session_state.tema = tema
    
    # Verifica√ß√£o de ader√™ncia ao tema
    with st.spinner("Verificando ader√™ncia ao tema..."):
        verificacao = evaluator.verificar_aderencia_tema(redacao_text, tema)
        st.session_state.verificacao_tema = verificacao
    
    # Se a reda√ß√£o n√£o fugir totalmente ao tema, continua a avalia√ß√£o
    if verificacao["aderencia"] != "Fuga ao tema":
        with st.spinner("Analisando reda√ß√£o... (isso pode levar alguns minutos)"):
            resultado = evaluator.evaluate_redacao(redacao_text, tema)
            st.session_state.avaliacao = resultado

# Carrega os avaliadores
evaluator, rag_system = carregar_avaliadores()

# T√≠tulo e descri√ß√£o
st.title("üìù Corretor de Reda√ß√µes ENEM")
st.markdown("""
Este sistema utiliza intelig√™ncia artificial para analisar e corrigir reda√ß√µes no estilo ENEM, 
oferecendo feedback detalhado sobre cada uma das cinco compet√™ncias avaliadas no exame.
""")

# Barra lateral com informa√ß√µes
with st.sidebar:
    st.header("Sobre o Corretor")
    st.markdown("""
    ### Como funciona?
    
    1. Digite o tema da reda√ß√£o
    2. Cole ou digite o texto da sua reda√ß√£o
    3. Clique em "Analisar Reda√ß√£o"
    4. Receba feedback detalhado e uma pontua√ß√£o estimada
    
    ### Compet√™ncias avaliadas
    
    1. **Dom√≠nio da norma padr√£o** (200 pontos)
    2. **Compreens√£o do tema** (200 pontos)
    3. **Argumenta√ß√£o** (200 pontos)
    4. **Coes√£o textual** (200 pontos)
    5. **Proposta de interven√ß√£o** (200 pontos)
    
    *Este sistema utiliza tecnologia RAG (Retrieval-Augmented Generation) e modelos de IA avan√ßados para fornecer feedback baseado nas diretrizes oficiais do ENEM.*
    """)
    
    # Op√ß√µes avan√ßadas
    st.subheader("Op√ß√µes Avan√ßadas")
    modelo = st.radio(
        "Modelo de IA",
        options=["Claude (Anthropic)", "GPT-4o-mini (OpenAI)"],
        index=0
    )
    
    # Bot√µes de ferramentas adicionais
    st.subheader("Ferramentas Adicionais")
    ferramentas_expander = st.expander("Expandir Ferramentas")
    with ferramentas_expander:
        col1, col2 = st.columns(2)
        with col1:
            if st.button("Sugerir Estrutura"):
                if 'tema' in st.session_state and st.session_state.tema:
                    with st.spinner("Gerando sugest√£o de estrutura..."):
                        sugestao = rag_system.sugerir_estrutura_redacao(st.session_state.tema)
                        st.session_state.sugestao_estrutura = sugestao
                else:
                    st.warning("Por favor, informe o tema da reda√ß√£o primeiro.")
        
        with col2:
            if st.button("Analisar Repert√≥rio"):
                if 'redacao_text' in st.session_state and st.session_state.redacao_text:
                    with st.spinner("Analisando repert√≥rio sociocultural..."):
                        analise = rag_system.identificar_repertorio_sociocultural(st.session_state.redacao_text)
                        st.session_state.analise_repertorio = analise
                else:
                    st.warning("Por favor, submeta uma reda√ß√£o primeiro.")

# Formul√°rio principal
with st.form(key="redacao_form"):
    tema = st.text_input("Tema da Reda√ß√£o", 
                         help="Digite o tema oficial da reda√ß√£o, exatamente como foi proposto")
    
    redacao_text = st.text_area("Texto da Reda√ß√£o", 
                               height=300,
                               help="Cole ou digite o texto completo da reda√ß√£o a ser analisada")
    
    col1, col2, col3 = st.columns([1, 1, 1])
    with col2:
        submit_button = st.form_submit_button(label="Analisar Reda√ß√£o")

# Processa a submiss√£o quando o bot√£o √© pressionado
if submit_button:
    if len(redacao_text.strip()) < 100:
        st.error("O texto da reda√ß√£o √© muito curto. Por favor, insira uma reda√ß√£o completa.")
    elif len(tema.strip()) < 10:
        st.error("Por favor, insira o tema completo da reda√ß√£o.")
    else:
        processar_submissao()

# Exibe as ferramentas adicionais se solicitadas
if 'sugestao_estrutura' in st.session_state:
    with st.expander("Sugest√£o de Estrutura para Reda√ß√£o", expanded=True):
        st.markdown(st.session_state.sugestao_estrutura)
        if st.button("Fechar Sugest√£o", key="fechar_sugestao"):
            del st.session_state.sugestao_estrutura

if 'analise_repertorio' in st.session_state:
    with st.expander("An√°lise de Repert√≥rio Sociocultural", expanded=True):
        st.markdown(st.session_state.analise_repertorio)
        if st.button("Fechar An√°lise", key="fechar_analise"):
            del st.session_state.analise_repertorio

# Exibe resultados de verifica√ß√£o de tema
if st.session_state.verificacao_tema:
    verificacao = st.session_state.verificacao_tema
    
    if verificacao["aderencia"] == "Adequada":
        st.success(f"‚úÖ **Ader√™ncia ao tema**: {verificacao['aderencia']}")
    elif verificacao["aderencia"] == "Tangenciamento":
        st.warning(f"‚ö†Ô∏è **Ader√™ncia ao tema**: {verificacao['aderencia']}")
    else:
        st.error(f"‚ùå **Ader√™ncia ao tema**: {verificacao['aderencia']}")
    
    with st.expander("Ver detalhes da an√°lise de tema"):
        st.markdown("### Justificativa")
        st.markdown(verificacao["justificativa"])
        
        if verificacao["recomendacoes"]:
            st.markdown("### Recomenda√ß√µes")
            st.markdown(verificacao["recomendacoes"])
    
    # Se for fuga ao tema, para a an√°lise aqui
    if verificacao["aderencia"] == "Fuga ao tema":
        st.error("A reda√ß√£o apresenta fuga ao tema. Corrija o texto para obter uma an√°lise completa.")
        if st.button("Tentar Novamente"):
            st.session_state.redacao_submetida = False
            st.session_state.verificacao_tema = None
            st.experimental_rerun()

# Exibe resultados da avalia√ß√£o
if st.session_state.avaliacao:
    avaliacao = st.session_state.avaliacao
    
    # Resumo da pontua√ß√£o
    st.header("Resultado da Avalia√ß√£o")
    
    # Exibe a nota total com um visual adequado
    nota_final = avaliacao["nota_final"]
    if nota_final >= 800:
        st.success(f"# Nota Final: {nota_final}/1000")
    elif nota_final >= 600:
        st.info(f"# Nota Final: {nota_final}/1000")
    elif nota_final >= 400:
        st.warning(f"# Nota Final: {nota_final}/1000")
    else:
        st.error(f"# Nota Final: {nota_final}/1000")
    
    # Cria um dataframe para exibir a pontua√ß√£o por compet√™ncia
    competencias_data = []
    for comp_id, comp_info in avaliacao["competencias"].items():
        nome_comp = ""
        if comp_id == "competencia_1":
            nome_comp = "Dom√≠nio da norma padr√£o"
        elif comp_id == "competencia_2":
            nome_comp = "Compreens√£o do tema"
        elif comp_id == "competencia_3":
            nome_comp = "Argumenta√ß√£o"
        elif comp_id == "competencia_4":
            nome_comp = "Coes√£o textual"
        elif comp_id == "competencia_5":
            nome_comp = "Proposta de interven√ß√£o"
        
        competencias_data.append({
            "Compet√™ncia": nome_comp,
            "Pontua√ß√£o": comp_info["pontuacao"],
            "M√°ximo": 200
        })
    
    # Cria e exibe um dataframe com as pontua√ß√µes
    df = pd.DataFrame(competencias_data)
    
    # Cria um gr√°fico com as pontua√ß√µes
    st.bar_chart(df.set_index("Compet√™ncia")["Pontua√ß√£o"])
    
    # Exibe as avalia√ß√µes por compet√™ncia
    st.subheader("Avalia√ß√£o por Compet√™ncia")
    
    # Cria abas para cada compet√™ncia
    tab1, tab2, tab3, tab4, tab5 = st.tabs([
        "Compet√™ncia 1", 
        "Compet√™ncia 2", 
        "Compet√™ncia 3", 
        "Compet√™ncia 4", 
        "Compet√™ncia 5"
    ])
    
    # Compet√™ncia 1
    with tab1:
        comp = avaliacao["competencias"]["competencia_1"]
        st.markdown(f"### Dom√≠nio da norma padr√£o - {comp['pontuacao']}/200")
        
        st.markdown("#### An√°lise")
        st.markdown(comp["analise"])
        
        col1, col2 = st.columns(2)
        with col1:
            st.markdown("#### Pontos Fortes")
            st.markdown(comp["pontos_fortes"])
        
        with col2:
            st.markdown("#### Pontos Fracos")
            st.markdown(comp["pontos_fracos"])
        
        st.markdown("#### Sugest√µes de Melhoria")
        st.markdown(comp["sugestoes"])
    
    # Compet√™ncia 2
    with tab2:
        comp = avaliacao["competencias"]["competencia_2"]
        st.markdown(f"### Compreens√£o do tema - {comp['pontuacao']}/200")
        
        st.markdown("#### An√°lise")
        st.markdown(comp["analise"])
        
        col1, col2 = st.columns(2)
        with col1:
            st.markdown("#### Pontos Fortes")
            st.markdown(comp["pontos_fortes"])
        
        with col2:
            st.markdown("#### Pontos Fracos")
            st.markdown(comp["pontos_fracos"])
        
        st.markdown("#### Sugest√µes de Melhoria")
        st.markdown(comp["sugestoes"])
    
    # Compet√™ncia 3
    with tab3:
        comp = avaliacao["competencias"]["competencia_3"]
        st.markdown(f"### Argumenta√ß√£o - {comp['pontuacao']}/200")
        
        st.markdown("#### An√°lise")
        st.markdown(comp["analise"])
        
        col1, col2 = st.columns(2)
        with col1:
            st.markdown("#### Pontos Fortes")
            st.markdown(comp["pontos_fortes"])
        
        with col2:
            st.markdown("#### Pontos Fracos")
            st.markdown(comp["pontos_fracos"])
        
        st.markdown("#### Sugest√µes de Melhoria")
        st.markdown(comp["sugestoes"])
    
    # Compet√™ncia 4
    with tab4:
        comp = avaliacao["competencias"]["competencia_4"]
        st.markdown(f"### Coes√£o textual - {comp['pontuacao']}/200")
        
        st.markdown("#### An√°lise")
        st.markdown(comp["analise"])
        
        col1, col2 = st.columns(2)
        with col1:
            st.markdown("#### Pontos Fortes")
            st.markdown(comp["pontos_fortes"])
        
        with col2:
            st.markdown("#### Pontos Fracos")
            st.markdown(comp["pontos_fracos"])
        
        st.markdown("#### Sugest√µes de Melhoria")
        st.markdown(comp["sugestoes"])
    
    # Compet√™ncia 5
    with tab5:
        comp = avaliacao["competencias"]["competencia_5"]
        st.markdown(f"### Proposta de interven√ß√£o - {comp['pontuacao']}/200")
        
        st.markdown("#### An√°lise")
        st.markdown(comp["analise"])
        
        col1, col2 = st.columns(2)
        with col1:
            st.markdown("#### Pontos Fortes")
            st.markdown(comp["pontos_fortes"])
        
        with col2:
            st.markdown("#### Pontos Fracos")
            st.markdown(comp["pontos_fracos"])
        
        st.markdown("#### Sugest√µes de Melhoria")
        st.markdown(comp["sugestoes"])
    
    # Avalia√ß√£o geral
    st.subheader("Avalia√ß√£o Geral")
    
    avaliacao_geral = avaliacao["avaliacao_geral"]
    
    st.markdown("#### An√°lise Geral")
    st.markdown(avaliacao_geral["avaliacao_geral"])
    
    col1, col2 = st.columns(2)
    with col1:
        st.markdown("#### Compet√™ncia Mais Forte")
        st.markdown(avaliacao_geral["competencia_mais_forte"])
    
    with col2:
        st.markdown("#### Compet√™ncia Mais Fraca")
        st.markdown(avaliacao_geral["competencia_mais_fraca"])
    
    st.markdown("#### Sugest√µes Priorit√°rias")
    st.markdown(avaliacao_geral["sugestoes_prioritarias"])
    
    st.markdown("#### Conclus√£o")
    st.markdown(avaliacao_geral["conclusao"])
    
    # Bot√£o para redefinir e fazer nova an√°lise
    if st.button("Analisar Nova Reda√ß√£o"):
        st.session_state.redacao_submetida = False
        st.session_state.avaliacao = None
        st.session_state.verificacao_tema = None
        st.experimental_rerun()

# Configura√ß√µes de estilo CSS
st.markdown("""
<style>
    .stTabs [data-baseweb="tab-list"] {
        gap: 8px;
    }

    .stTabs [data-baseweb="tab"] {
        height: 50px;
        white-space: pre-wrap;
        border-radius: 4px 4px 0px 0px;
        padding: 10px 16px;
        background-color: #f0f2f6;
    }

    .stTabs [aria-selected="true"] {
        background-color: #e6f0ff;
        color: #0066cc;
    }
    
    h3 {
        padding-top: 16px;
        padding-bottom: 8px;
    }
</style>
""", unsafe_allow_html=True)